package com.sathya.springboot.service;

import java.security.PublicKey;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;

import com.sathya.springboot.Entity.ProductEntity;
import com.sathya.springboot.Repository.ProductRepository;
import com.sathya.springboot.model.Productmodel;

@Service
public class ProductService {
	@Autowired
	ProductRepository productrepository;
	
	public void saveProductdetails(Productmodel Productmodel)
	{
		double stockvalue;
		stockvalue=Productmodel.getPrice()*Productmodel.getQuantity();
		double discountprice;
		discountprice=Productmodel.getPrice()*Productmodel.getDiscountrate()/100;
		double offerprice;
		offerprice=Productmodel.getPrice()-discountprice;
		double taxprice;
		taxprice=18/100*offerprice;
		double finalprice;
		finalprice=offerprice+taxprice;
		
		ProductEntity productentity=new ProductEntity();
		productentity.setName(Productmodel.getName());
		productentity.setBrand(Productmodel.getBrand());
		productentity.setMadein(Productmodel.getMadein());
		productentity.setPrice(Productmodel.getPrice());
		productentity.setQuantity(Productmodel.getQuantity());
		productentity.setDiscountrate(Productmodel.getDiscountrate());
		productentity.setDiscountprice(discountprice);
		productentity.setStockvalue(stockvalue);
		productentity.setTaxprice(taxprice);
		productentity.setDiscountprice(finalprice);
		productentity.setDiscountprice(offerprice);
		
		productrepository.save(productentity);
	}
	public List<ProductEntity>getAllProducts(){
		List<ProductEntity>product=productrepository.findAll();
		return product;
		
	}
	
	public  ProductEntity searchById(long id) {
		
    Optional<ProductEntity> optionalData = productrepository.findById(id);
    if(optionalData.isPresent())
    {
    	ProductEntity product = optionalData.get();
    	return product;
   }
    else
    {
    	return null;
    }
	}
	//delete operation

	public void deleteproductById(long id) {
		
		productrepository.deleteById(id);
	}
	public Productmodel editbyproductid(long id) {
		Optional<ProductEntity>optional=Repository.findById(id);
		
	 if(optional.isPresent()){
		 ProductEntity productEntity=optional.get();
		 Productmodel productmodel=new Productmodel();
		 productmodel.setName(productEntity.getName());
		 productmodel.setBrand(productEntity.getBrand());
		 productmodel.setMadein(productEntity.getMadein());
		 productmodel.setPrice(productEntity.getPrice());
		 productmodel.setQuantity(productEntity.getQuantity());
		 productmodel.setDiscountrate(productEntity.getDiscountrate());
		 return productmodel;
	 }
	 else {
		 return null;
	 }
	}

		 
		
	}
	
		
	

	
 
		
		
	   

	   

